{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash\"","webpack:///external \"jquery\"","webpack:///external \"app/core/core\"","webpack:///external \"app/core/config\"","webpack:///external \"app/plugins/sdk\"","webpack:///./utils/DashboardLoader.js","webpack:///./components/config.js","webpack:///./utils/InfluxProxy.js","webpack:///./utils/DatabaseConnection.js","webpack:///./module.js","webpack:///./components/importNet.js","webpack:///./utils/location_util.ts","webpack:///./utils/Influx.js","webpack:///./utils/NetParser.js","webpack:///./components/control.js","webpack:///./utils/Looper.js","webpack:///./utils/LogicNetBuilder.js","webpack:///../node_modules/jsbayes/jsbayes.js","webpack:///../node_modules/webpack/buildin/module.js","webpack:///./utils/AlertData.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__8__","DashboardLoader","backend","_classCallCheck","this","console","info","backendSrv","dashboards","uids","then","res","_this","catch","err","log","uid","getDashboardByUid","_this2","push","dashboard","isHandled","_this3","promises","map","uid_container","importSingleDashboard","Promise","all","searchDashboards","_this4","importDashboards","networks","length","network","getDashboards","_this5","extract","DreamCorpAppConfigCtrl","$location","$inject","_createClass","Influx","require","InfluxProxy","_DatabaseConnection","host","database","port","_possibleConstructorReturn","__proto__","getPrototypeOf","influx","_inherits","context","$","_context","abrupt","url","type","success","error","test","status","exception","checkConnection","createDB","measurements","series","values","regeneratorRuntime","wrap","_context3","prev","next","insert","drop","instance","Constructor","TypeError","DatabaseConnection","Control","ImportNetCtrl","ConfigCtrl","undefined","_config","_importNet","_control","dark","light","_config2","_interopRequireDefault","obj","default","__inputs","label","description","pluginId","pluginName","__requires","id","version","list","builtIn","datasource","enable","hide","iconColor","gnetId","graphTooltip","iteration","links","panels","aliasColors","bars","dashLength","dashes","fill","gridPos","h","w","x","y","legend","avg","current","max","min","show","total","linewidth","minSpan","nullPointMode","percentage","pointradius","points","renderer","repeat","repeatDirection","seriesOverrides","spaceLength","stack","steppedLine","targets","groupBy","measurement","orderByTime","policy","refId","resultFormat","select","params","timeFrom","timeRegions","timeShift","title","tooltip","shared","sort","value_type","xaxis","buckets","yaxes","format","logBase","align","alignLevel","schemaVersion","style","tags","templating","allValue","text","includeAll","multi","options","selected","skipUrlSync","from","to","refresh_intervals","time_options","validationSrv","navModelSrv","$routeParams","step","nameExists","uidExists","autoGenerateUid","autoGenerateUidValue","folderId","initialFolderTitle","default_host","default_port","default_password","password","default_user","user","templateUrl","dash","net","query","nodi","option","access","basicAuth","withCredentials","isDefault","readOnly","ds","payload","appEvents","emit","_core","checkSemantic","boxing","dashboard_template","inputs","inputModel","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","iterator","_iterator","done","input","inputValueChanged","uidChanged","titleChanged","datasources","jsonData","keepCookies","alerting","annotations","baseUrl","dependencies","grafanaVersion","plugins","explore","includes","author","logos","small","large","screenshots","logs","queryOptions","minInterval","routes","sources","_lodash2","filter","val","inputsValid","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","titleTouched","validateNewDashboardName","hasNameValidationError","nameValidationError","message","initial","hasUidValidationError","uidValidationError","meta","folderTitle","folder","samples","time","monitored","overwrite","dashUrl","_location_util2","stripBaseFromUrl","importedUrl","parse","jsonText","parseError","__webpack_exports__","grafana_app_core_config__WEBPACK_IMPORTED_MODULE_0__","grafana_app_core_config__WEBPACK_IMPORTED_MODULE_0___default","appSubUrl","a","stripExtraChars","endsWith","indexOf","slice","contentType","data","processData","_asyncToGenerator","mark","_callee2","_context2","ajax","_callee3","_ref4","_callee4","_context4","defineProperties","target","props","descriptor","configurable","writable","protoProps","staticProps","jsonNet","NetParser","hasErrors","k","nodes","parentName","indexParent","thresholds","node","j","probabilities","sum","NparentsStates","cpt","checkNormalize","text_net","controlNameNodes","isOk","getParentIndex","parents","stati","panel","$scope","ctrl","loader","onInitData","load","setDataFromNets","wait","hasStarted","index","saveDashboard","sample","save","Looper","setBackendSrv","start","stop","deleteDatasource","deleteDashboard","location","reload","delete","alertData","logic_networks","influxes","getNets","nets","timer","setInterval","buildAllNets","setTimeout","clearInterval","stateIndex","panelId","influx_index","unobserve","getValueFromAlert","decideState","samplingNet","probs","states","findDatabase","_loop","net_id","loopAsync","count","_i","netIndex","nodeIndex","soglie","alert_value","fn","gen","apply","arguments","resolve","reject","arg","LogicNetBuilder","jsbayes","logicNet","logicNets","newGraph","addParent","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","constructor","window","initCpt","numValues","initCptWithParents","paIndex","numPaVals","cpts","async","f","args","e","Array","isArray","setNodeCptProbs","nextIndex","normalizeProbs","arr","defineLib","saveSamples","reinit","opts","g","dirty","samplesAsCsv","D_FIELD","row","csv","rowDelimiter","lwSum","initSampleLw","isObserved","wasSampled","fa","saveSampleLw","update","unode","tnode","sampledLw","nodeMap","observe","valueIndex","addNode","parent","valueIndexMap","v","sampleLw","pSampleLw","dh","fv","Math","random","setCpt","initNodeCpt","normalizeCpts","pas","pa","JSON","stringify","msg","webpackPolyfill","children","AlertData","_ref","_callee","tris","evalData","evalMatches","sent","_x4","_x5","_x6","_ref2","getDataFromAlert"],"mappings":"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","file":"./module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","class DashboardLoader {\r\n    constructor(backend){\r\n        console.info(\"DashboardLoader\");\r\n        this.backendSrv = backend;\r\n        this.dashboards = [];\r\n        this.uids = [];\r\n    }\r\n    async searchDashboards(){\r\n        return this.backendSrv.get('/api/search?tag=bayesian-network')\r\n            .then(res =>{\r\n                this.uids = res;\r\n            })\r\n            .catch(err=>console.log(err));\r\n    }\r\n    async importSingleDashboard(uid) {\r\n        return await this.backendSrv\r\n            .getDashboardByUid(uid)\r\n            .then(res => {\r\n                this.dashboards.push(res.dashboard);\r\n            })\r\n            .catch(err => {\r\n                err.isHandled = true;\r\n            });\r\n    }\r\n    importDashboards() {\r\n        this.dashboards = []; //reset\r\n        const promises = this.uids.map(uid_container => this.importSingleDashboard(uid_container.uid));\r\n        return Promise.all(promises); //synchro\r\n        \r\n    }\r\n    async getDashboards(){ //ritorna le dashboards\r\n        return this.searchDashboards()\r\n            .then(()=>this.importDashboards()\r\n                .then(() =>{\r\n                    return this.dashboards;\r\n                })\r\n            )\r\n            .catch((err)=>console.info(err));\r\n    }\r\n    extract(dashboards){ //ritorno sempre le dashboard e poi estraggo le nets\r\n        let networks = [];\r\n        for(let i=0;i<dashboards.length;i++)\r\n            networks.push(dashboards[i].network);\r\n        return networks;\r\n    }\r\n    async getNets(){\r\n        return this.getDashboards()\r\n            .then(()=> {\r\n                return this.extract(this.dashboards);\r\n            });\r\n    }\r\n}\r\nmodule.exports = DashboardLoader;","export class DreamCorpAppConfigCtrl {\r\n\r\n  /** @ngInject */\r\n  constructor($location){\r\n    this.$location = $location;\r\n  }\r\n  redirect(){\r\n    console.info(\"redirect to importNet\");\r\n    this.$location.url('plugins/dreamcorp-app/page/import-bayesian-network'); //redirecting to importNet\r\n  }\r\n}\r\n\r\nDreamCorpAppConfigCtrl.templateUrl = 'components/config.html';\r\n","import * as $ from \"jquery\";\r\n\r\nconst DatabaseConnection = require('./DatabaseConnection');\r\nconst Influx = require(\"./Influx\");\r\nclass InfluxProxy extends  DatabaseConnection{\r\n    //need for host,port and database\r\n    constructor(host,port,database){\r\n        super(host,port,database);\r\n        this.influx = null;\r\n    }\r\n    //check connection\r\n    async checkConnection(){\r\n        const context = this;\r\n        return $.ajax({\r\n            url:context.host+context.port+'/ping?verbose=true',\r\n            type:'HEAD',\r\n            success: function () {\r\n                //console.info(\"connection ok\");\r\n                if(context.influx === null){ //solo se non c'è già\r\n                    context.influx = new Influx(context.host, context.port, context.database); //se va tutto bene costruisco un influx\r\n                }\r\n            },\r\n            error: function(test, status, exception) {\r\n                //console.info(\"connection failed\");\r\n                context.influx = null;\r\n            }\r\n        });\r\n    }\r\n    async createDB() {\r\n        this.checkConnection()\r\n            .then(()=>{\r\n                if (this.influx !== null){\r\n                    return this.influx.createDB();\r\n                }\r\n                else throw \"Connection Error\";\r\n            })\r\n            .catch((err)=>console.info(err));\r\n    }\r\n    async insert(measurements,series,values){ //measurements = nodi, series = stati, values = probability\r\n        this.checkConnection()\r\n            .then(()=>{\r\n                if(this.influx !== null){\r\n                    return this.influx.insert(measurements,series,values);\r\n                }\r\n                else throw \"Connection Error\";\r\n            })\r\n            .catch((err)=>console.info(err));\r\n    }\r\n    \r\n    async drop(){\r\n        this.checkConnection()\r\n            .then(()=>{\r\n                if(this.influx !== null)\r\n                    return this.influx.drop();\r\n                else throw \"Connection Error\";\r\n            })\r\n    }\r\n}\r\nmodule.exports = InfluxProxy;\r\n","class DatabaseConnection{\r\n    //need for host,port and database\r\n    constructor(host,port,database){\r\n        console.info(\"New DatabaseConnection\");\r\n        if(host!==null){\r\n            this.host = host;\r\n            if(port!==null) {\r\n                this.port = port;\r\n                if (database !== null)\r\n                    this.database = database;\r\n                else throw \"Database null Error\";\r\n            }\r\n            else throw \"Port null Error\";\r\n        }\r\n        else throw \"Host null Error\";\r\n    }\r\n}\r\n\r\nmodule.exports = DatabaseConnection;","import './sass/grafana-dreamcorp.dark.scss';\r\nimport './sass/grafana-dreamcorp.light.scss';\r\n\r\nimport {DreamCorpAppConfigCtrl} from './components/config';\r\nimport {ImportNetCtrl} from './components/importNet';\r\nimport {Control} from './components/control';\r\nimport {loadPluginCss} from 'grafana/app/plugins/sdk';\r\n\r\nloadPluginCss({\r\n    dark: 'plugins/dreamcorp-app/css/grafana-zabbix.dark.css',\r\n    light: 'plugins/dreamcorp-app/css/grafana-zabbix.light.css'\r\n});\r\n\r\nexport {\r\n    DreamCorpAppConfigCtrl as ConfigCtrl,\r\n    ImportNetCtrl, Control\r\n};\r\n","import _ from 'lodash';\r\nimport config from 'grafana/app/core/config';\r\nimport locationUtil from '../utils/location_util';\r\nimport {appEvents} from \"grafana/app/core/core\";\r\nconst InfluxProxy = require('../utils/InfluxProxy');\r\n\r\n//template struttura dashboard\r\nlet dashboard_template = {\r\n    __inputs: [\r\n        {\r\n            name: \"DS_INFLUXDB-RETE\",\r\n            label: \"InfluxDB-rete\",\r\n            description: \"\",\r\n            type: \"datasource\",\r\n            pluginId: \"influxdb\",\r\n            pluginName: \"InfluxDB\"\r\n        }\r\n    ],\r\n    __requires: [\r\n        {\r\n            type: \"grafana\",\r\n            id: \"grafana\",\r\n            name: \"Grafana\",\r\n            version: \"5.4.0\"\r\n        },\r\n        {\r\n            type: \"panel\",\r\n            id: \"graph\",\r\n            name: \"Graph\",\r\n            version: \"5.0.0\"\r\n        },\r\n        {\r\n            type: \"datasource\",\r\n            id: \"influxdb\",\r\n            name: \"InfluxDB\",\r\n            version: \"5.0.0\"\r\n        }\r\n    ],\r\n    annotations: {\r\n        list: [\r\n            {\r\n                builtIn: 1,\r\n                datasource: \"-- Grafana --\",\r\n                enable: true,\r\n                hide: true,\r\n                iconColor: \"rgba(0, 211, 255, 1)\",\r\n                name: \"Annotations & Alerts\",\r\n                type: \"dashboard\"\r\n            }\r\n        ]\r\n    },\r\n    editable: false,\r\n    gnetId: null,\r\n    graphTooltip: 0,\r\n    id: null,\r\n    iteration: 1551364330292,\r\n    links: [],\r\n    panels: [\r\n        {\r\n            aliasColors: {},\r\n            bars: false,\r\n            dashLength: 10,\r\n            dashes: false,\r\n            datasource: \"${DS_INFLUXDB-RETE}\",\r\n            fill: 1,\r\n            gridPos: {\r\n                h: 8,\r\n                w: 7,\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            id: 2,\r\n            legend: {\r\n                avg: false,\r\n                current: false,\r\n                max: false,\r\n                min: false,\r\n                show: true,\r\n                total: false,\r\n                values: false\r\n            },\r\n            lines: true,\r\n            linewidth: 1,\r\n            links: [],\r\n            minSpan: 7,\r\n            nullPointMode: \"null\",\r\n            percentage: false,\r\n            pointradius: 5,\r\n            points: false,\r\n            renderer: \"flot\",\r\n            repeat: \"nodo\",\r\n            repeatDirection: \"h\",\r\n            seriesOverrides: [],\r\n            spaceLength: 10,\r\n            stack: false,\r\n            steppedLine: false,\r\n            targets: [\r\n                {\r\n                    groupBy: [],\r\n                    measurement: \"$nodo\",\r\n                    orderByTime: \"DESC\",\r\n                    policy: \"default\",\r\n                    refId: \"A\",\r\n                    resultFormat: \"time_series\",\r\n                    select: [\r\n                        [\r\n                            {\r\n                                params: [\r\n                                    \"*\"\r\n                                ],\r\n                                type: \"field\"\r\n                            }\r\n                        ]\r\n                    ],\r\n                    tags: []\r\n                }\r\n            ],\r\n            thresholds: [],\r\n            timeFrom: null,\r\n            timeRegions: [],\r\n            timeShift: null,\r\n            title: \"Nodo: $nodo\",\r\n            tooltip: {\r\n                shared: true,\r\n                sort: 0,\r\n                value_type: \"individual\"\r\n            },\r\n            type: \"graph\",\r\n            xaxis: {\r\n                buckets: null,\r\n                mode: \"time\",\r\n                name: null,\r\n                show: true,\r\n                values: []\r\n            },\r\n            yaxes: [\r\n                {\r\n                    format: \"short\",\r\n                    label: null,\r\n                    logBase: 1,\r\n                    max: null,\r\n                    min: null,\r\n                    show: true\r\n                },\r\n                {\r\n                    format: \"short\",\r\n                    label: null,\r\n                    logBase: 1,\r\n                    max: null,\r\n                    min: null,\r\n                    show: true\r\n                }\r\n            ],\r\n            yaxis: {\r\n                align: false,\r\n                alignLevel: null\r\n            }\r\n        }\r\n    ],\r\n    refresh: \"10s\",\r\n    schemaVersion: 16,\r\n    style: \"dark\",\r\n    tags: [\"bayesian-network\"],\r\n    templating: {\r\n        list: [\r\n            {\r\n                allValue: null,\r\n                current: {\r\n                    tags: [],\r\n                    text: \"nodo1 + nodo2 + nodo3 + nodo4 + nodo5 + nodo6\",\r\n                    value: [\r\n                        \"nodo1\",\r\n                        \"nodo2\",\r\n                        \"nodo3\",\r\n                        \"nodo4\",\r\n                        \"nodo5\",\r\n                        \"nodo6\"\r\n                    ]\r\n                },\r\n                hide: 0,\r\n                includeAll: false,\r\n                label: \"Nodi\",\r\n                multi: true,\r\n                name: \"nodo\",\r\n                options: [\r\n                    {\r\n                        selected: true,\r\n                        text: \"nodo1\",\r\n                        value: \"nodo1\"\r\n                    },\r\n                    {\r\n                        selected: true,\r\n                        text: \"nodo2\",\r\n                        value: \"nodo2\"\r\n                    },\r\n                    {\r\n                        selected: true,\r\n                        text: \"nodo3\",\r\n                        value: \"nodo3\"\r\n                    },\r\n                    {\r\n                        selected: true,\r\n                        text: \"nodo4\",\r\n                        value: \"nodo4\"\r\n                    },\r\n                    {\r\n                        selected: true,\r\n                        text: \"nodo5\",\r\n                        value: \"nodo5\"\r\n                    },\r\n                    {\r\n                        selected: true,\r\n                        text: \"nodo6\",\r\n                        value: \"nodo6\"\r\n                    }\r\n                ],\r\n                query: \"nodo1,nodo2,nodo3,nodo4,nodo5,nodo6\",\r\n                skipUrlSync: false,\r\n                type: \"custom\"\r\n            }\r\n        ]\r\n    },\r\n    time: {\r\n        from: \"now-5m\",\r\n        to: \"now\"\r\n    },\r\n    timepicker: {\r\n        refresh_intervals: [\r\n            \"5s\",\r\n            \"10s\",\r\n            \"30s\",\r\n            \"1m\",\r\n            \"5m\",\r\n            \"15m\",\r\n            \"30m\",\r\n            \"1h\",\r\n            \"2h\",\r\n            \"1d\"\r\n        ],\r\n        time_options: [\r\n            \"5m\",\r\n            \"15m\",\r\n            \"1h\",\r\n            \"6h\",\r\n            \"12h\",\r\n            \"24h\",\r\n            \"2d\",\r\n            \"7d\",\r\n            \"30d\"\r\n        ]\r\n    },\r\n    timezone: \"\",\r\n    title: \"Inference Dashboard\",\r\n    uid: \"mjtTRCrmzFds2\",\r\n    version: 7,\r\n    network: null\r\n};\r\n\r\nexport class ImportNetCtrl {\r\n    \r\n    /** @ngInject */\r\n    constructor(backendSrv, validationSrv, navModelSrv, $location, $routeParams) {\r\n        this.backendSrv = backendSrv;\r\n        this.validationSrv = validationSrv;\r\n        this.$location = $location;\r\n        this.$routeParams = $routeParams;\r\n        this.step = 1;\r\n        this.nameExists = false;\r\n        this.uidExists = false;\r\n        this.autoGenerateUid = true;\r\n        this.autoGenerateUidValue = 'auto-generated';\r\n        this.folderId =  $routeParams.folderId ? Number($routeParams.folderId) || 0 : null;\r\n        this.initialFolderTitle = 'Select a folder';\r\n        \r\n        this.default_host =\"http://localhost\";\r\n        this.host = this.default_host;\r\n        this.default_port =\":8086\";\r\n        this.port = this.default_port;\r\n        this.default_password = \"\";\r\n        this.password = this.default_password;\r\n        this.default_user = \"\";\r\n        this.user = this.default_user = \"\";\r\n        \r\n        this.datasource = null;\r\n        \r\n        //this.default_database =\"bayesian\";\r\n        //this.database = this.default_database;\r\n        /*\r\n        // check gnetId in url\r\n        if ($routeParams.gnetId) {\r\n            this.gnetUrl = $routeParams.gnetId;\r\n            this.checkGnetDashboard();\r\n        }*/\r\n        \r\n    }\r\n    \r\n    //metodi per settare i campi dati relativi al salvataggio dati\r\n    setHost(host){\r\n        this.host = host;\r\n    }\r\n    setPort(port){\r\n        this.port = port;\r\n    }\r\n    setUser(user){\r\n        this.user = user;\r\n    }\r\n    setPassword(password){\r\n        this.password = password;\r\n    }\r\n    \r\n    personalizeTemplating(net,dash){\r\n        \r\n        let query = \"\";\r\n        let text = \"\";\r\n        let value = [];\r\n        let options = [];\r\n    \r\n        let id;\r\n    \r\n        for(let i=0;i<net.nodi.length;i++){\r\n            id=net.nodi[i].id;\r\n            query+=id;\r\n            text+=id;\r\n            value.push(id);\r\n            \r\n            let option = {\r\n                selected: true,\r\n                text: \"\",\r\n                value: \"\"\r\n            };\r\n            \r\n            option.text = id;\r\n            option.value = id;\r\n            \r\n            options.push(option);\r\n            if(i!==net.nodi.length-1){\r\n                query+=\",\";\r\n                text+=\" + \";\r\n            }\r\n        }\r\n        \r\n        //inserisco nel template i dati che mi servono per la variabile\r\n        dash.templating.list[0].current.text=text;\r\n        dash.templating.list[0].current.value=value;\r\n        dash.templating.list[0].options=options;\r\n        dash.templating.list[0].query=query;\r\n    }\r\n    \r\n    setUpDatasource(net,dash){\r\n        dash.panels[0].datasource = \"InfluxDB-\"+net.id;\r\n    }\r\n    \r\n    //creo quando dopo l'esecuzione di Savedashboard\r\n    createDatasource(net,dash){\r\n        \r\n        //let Url = this.host+this.port;\r\n        //let password = \"Ghi8dav97!\";\r\n        //let user = \"admin\";\r\n        const payload = {\r\n            name:\"InfluxDB-\"+net.id,\r\n            type:\"influxdb\",\r\n            access:\"proxy\",\r\n            url:this.host+this.port,\r\n            password:this.password,\r\n            user:this.user,\r\n            database:net.id,\r\n            basicAuth:false,\r\n            withCredentials:false,\r\n            isDefault:false,\r\n            version:3,\r\n            readOnly:false\r\n        };\r\n        \r\n        return this.backendSrv.post('/api/datasources/',payload)\r\n            .then((ds)=>{\r\n                this.datasource = ds;\r\n                dash.panels[0].datasource = ds.name;\r\n                return ds;\r\n            })\r\n            .catch((err)=>console.info(err));\r\n    }\r\n    \r\n    \r\n    boxing(net, dash){\r\n        this.personalizeTemplating(net,dash); //aggiunta di variabili personalizzate template\r\n        this.setUpDatasource(net,dash); //aggiunge la datasource\r\n        dash.title = net.id; //aggiorno per vedere a schermo il nome della rete\r\n        dash.network = net; //attacco la struttura della rete\r\n        return dash;\r\n    }\r\n    \r\n    //crea un database con il nome uguale a quello della rete importata\r\n    createDB(){\r\n        const influx = new InfluxProxy(this.host,this.port,this.dash.network.id);\r\n        influx.createDB()\r\n            .then(()=>{\r\n                appEvents.emit('alert-success', ['Database created', '']);\r\n            })\r\n            .catch((err)=>{\r\n                appEvents.emit('alert-error', ['Database creation error', err]);\r\n            });\r\n    }\r\n    \r\n    //controlla che sia corretta semanticamente\r\n    //restituisce true o false\r\n    checkSematic(net){\r\n        const parser = require('../utils/NetParser');\r\n        return parser.checkSemantic(net);\r\n    }\r\n    \r\n    onUpload(net) {\r\n        console.info(\"onUpload\");\r\n        if(this.checkSematic(net)) {\r\n\r\n            this.network = net; //per la visualizzazione html\r\n    \r\n            //preparo la dashboard con il boxing templetizzato\r\n            this.dash = this.boxing(net,dashboard_template);\r\n            \r\n            //default\r\n            this.dash.id = null;\r\n            this.step = 2;\r\n            this.inputs = [];\r\n            \r\n            if (this.dash.__inputs) {\r\n                for (const input of this.dash.__inputs) {\r\n                    const inputModel = {\r\n                        name: input.name,\r\n                        label: input.label,\r\n                        info: input.description,\r\n                        value: input.value,\r\n                        type: input.type,\r\n                        pluginId: input.pluginId,\r\n                        options: [],\r\n                    };\r\n    \r\n                    if (input.type === 'datasource') {\r\n                        this.setDatasourceOptions(input, inputModel);\r\n                    } else if (!inputModel.info) {\r\n                        inputModel.info = 'Specify a string constant';\r\n                    }\r\n    \r\n                    this.inputs.push(inputModel);\r\n                    this.inputs[0].value = \"InfluxDB-\"+this.dash.network.id;\r\n                }\r\n            }\r\n            \r\n            this.inputsValid = this.inputs.length === 0;\r\n            \r\n            this.inputValueChanged();\r\n            this.titleChanged();\r\n            this.uidChanged(true);\r\n        }\r\n    }\r\n    \r\n    addDatasourceOption(){\r\n        let datasources = config.datasources;\r\n        //template options for the datasource\r\n        const options = {\r\n            id: this.datasource.id,\r\n            name: this.datasource.name,\r\n            type: \"influxdb\",\r\n            database: this.network.id,\r\n            jsonData: {\r\n                keepCookies: []\r\n            },\r\n            url: \"/api/datasources/proxy/\"+this.datasource.id,\r\n            meta:{\r\n                alerting: true,\r\n                annotations: true,\r\n                baseUrl: \"public/app/plugins/datasource/influxdb\",\r\n                dependencies:{\r\n                    grafanaVersion: \"*\",\r\n                    plugins: []\r\n                },\r\n                explore: false,\r\n                hasQueryHelp: true,\r\n                id: \"influxdb\",\r\n                includes: null,\r\n                info: {\r\n                    author: {\r\n                        name: \"Grafana Project\",\r\n                        url: \"https://grafana.com\"\r\n                    },\r\n                    description: \"InfluxDB Data Source for Grafana\",\r\n                    links: null,\r\n                    logos: {\r\n                        small: \"public/app/plugins/datasource/influxdb/img/influxdb_logo.svg\",\r\n                        large: \"public/app/plugins/datasource/influxdb/img/influxdb_logo.svg\"\r\n                    },\r\n                    screenshots: null,\r\n                    updated: \"\",\r\n                    version: \"5.0.0\"\r\n                },\r\n                logs: false,\r\n                metrics: true,\r\n                module: \"app/plugins/datasource/influxdb/module\",\r\n                name: \"InfluxDB\",\r\n                queryOptions: {\r\n                    minInterval: true\r\n                },\r\n                routes: null,\r\n                type: \"datasource\"\r\n            }\r\n        };\r\n    \r\n        datasources[this.datasource.name] = options;\r\n    }\r\n    /** Default */\r\n    setDatasourceOptions(input, inputModel) {\r\n        /** default */\r\n        const sources = _.filter(config.datasources, val => {\r\n            return val.type === input.pluginId;\r\n        });\r\n        \r\n        if (sources.length === 0) {\r\n            inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\r\n        } else if (!inputModel.info) {\r\n            inputModel.info = 'Select a ' + input.pluginName + ' data source';\r\n        }\r\n        \r\n        inputModel.options = sources.map(val => {\r\n            return { text: val.name, value: val.name };\r\n        });\r\n    }\r\n    /** Default */\r\n    inputValueChanged() {\r\n        this.inputsValid = true;\r\n        for (const input of this.inputs) {\r\n            if (!input.value) {\r\n                this.inputsValid = false;\r\n            }\r\n        }\r\n    }\r\n    /** Default */\r\n    titleChanged() {\r\n        this.titleTouched = true;\r\n        this.nameExists = false;\r\n        \r\n        this.validationSrv\r\n            .validateNewDashboardName(this.folderId, this.dash.title)\r\n            .then(() => {\r\n                this.nameExists = false;\r\n                this.hasNameValidationError = false;\r\n            })\r\n            .catch(err => {\r\n                if (err.type === 'EXISTING') {\r\n                    this.nameExists = true;\r\n                }\r\n                \r\n                this.hasNameValidationError = true;\r\n                this.nameValidationError = err.message;\r\n            });\r\n    }\r\n    /** Default */\r\n    uidChanged(initial) {\r\n        this.uidExists = false;\r\n        this.hasUidValidationError = false;\r\n        \r\n        if (initial === true && this.dash.uid) {\r\n            this.autoGenerateUidValue = 'value set';\r\n        }\r\n        \r\n        this.backendSrv\r\n            .getDashboardByUid(this.dash.uid)\r\n            .then(res => {\r\n                this.uidExists = true;\r\n                this.hasUidValidationError = true;\r\n                this.uidValidationError = `Dashboard named '${res.dashboard.title}' in folder '${\r\n                    res.meta.folderTitle\r\n                    }' has the same uid`;\r\n            })\r\n            .catch(err => {\r\n                err.isHandled = true;\r\n            });\r\n    }\r\n    /** Default */\r\n    onFolderChange(folder) {\r\n        this.folderId = folder.id;\r\n        this.titleChanged();\r\n    }\r\n    /** Default */\r\n    onEnterFolderCreation() {\r\n        this.inputsValid = false;\r\n    }\r\n    /** Default */\r\n    onExitFolderCreation() {\r\n        this.inputValueChanged();\r\n    }\r\n    /** Default */\r\n    isValid() {\r\n        return this.inputsValid && this.folderId !== null;\r\n    }\r\n    \r\n    saveDashboard() {\r\n        \r\n        this.dash.network.id = this.dash.title; //quello che vedo a schermo lo assegno alla struttura della rete\r\n        \r\n        //creo la datasource\r\n        this.createDatasource(this.dash.network,this.dash)\r\n            .then(()=>{\r\n                \r\n                this.addDatasourceOption();\r\n                //inputs preparation\r\n                this.inputs[0].value = this.datasource.name; //aggiorno il valore della dashboard\r\n                const inputs = this.inputs.map(input => {\r\n                    return {\r\n                        name: input.name,\r\n                        type: input.type,\r\n                        pluginId: input.pluginId,\r\n                        value: input.value,\r\n                    };\r\n                });\r\n                //*********\r\n                \r\n                //power up of the net structure with some useful information\r\n                let network_structure = {\r\n                    id: this.dash.title,\r\n                    host: this.host,\r\n                    port: this.port,\r\n                    samples: 10000,\r\n                    time: 10000,\r\n                    monitored: false,\r\n                    nodi: this.dash.network.nodi\r\n                };\r\n                \r\n                this.dash.network = network_structure; // new boxing\r\n                //**********\r\n                \r\n                //this.setUpDatasource(this.dash.network,this.dash); //set up again to update\r\n                //datasource setting\r\n                this.dash.panels[0].datasource = this.datasource.name; //sistemo il nome della datasource\r\n                //*******\r\n                \r\n                //creo il database\r\n                this.createDB();\r\n                //***********\r\n                \r\n                /** TESTING OUT\r\n                console.info(\"saving: \");\r\n                let dash = this.dash;\r\n                let network = this.dash.network;\r\n                let datasource = this.dash.panels[0].datasource;\r\n                console.info({dash,network,datasource});\r\n                */\r\n                \r\n                //salvo la dashboard\r\n                return this.backendSrv\r\n                    .post('api/dashboards/import', {\r\n                        dashboard: this.dash,\r\n                        overwrite: true,\r\n                        inputs: inputs,\r\n                        folderId: this.folderId,\r\n                    })\r\n                    .then(dash => {\r\n                        const dashUrl = locationUtil.stripBaseFromUrl(dash.importedUrl);\r\n                        this.$location.url(dashUrl);\r\n                    })\r\n                    .catch((err)=>{\r\n                        appEvents.emit('alert-error', ['Network saving failed', err]);\r\n                    });\r\n            })\r\n            .catch((err)=>console.info(err));\r\n    }\r\n    \r\n    loadJsonText() {\r\n        try {\r\n            this.parseError = '';\r\n            this.onUpload(JSON.parse(this.jsonText)); //invio tutto quello che ricevo\r\n        } catch (err) {\r\n            console.log(err);\r\n            this.parseError = err.message;\r\n        }\r\n    }\r\n    \r\n    back() {\r\n        this.gnetUrl = '';\r\n        this.step = 1;\r\n    }\r\n}\r\nImportNetCtrl.templateUrl = 'components/importNet.html';\r\n","import config from 'grafana/app/core/config';\r\n\r\nexport const stripBaseFromUrl = url => {\r\n  const appSubUrl = config.appSubUrl;\r\n  const stripExtraChars = appSubUrl.endsWith('/') ? 1 : 0;\r\n  const urlWithoutBase =\r\n    url.length > 0 && url.indexOf(appSubUrl) === 0 ? url.slice(appSubUrl.length - stripExtraChars) : url;\r\n\r\n  return urlWithoutBase;\r\n};\r\n\r\nexport default { stripBaseFromUrl };\r\n","import * as $ from 'jquery';\r\nconst DatabaseConnection = require('./DatabaseConnection');\r\nclass Influx extends  DatabaseConnection{\r\n    //need for host,port and database\r\n    constructor(host,port,database){\r\n        super(host,port,database);\r\n        console.info(\"New Influx\");\r\n    }\r\n    //create a db in the host\r\n    async createDB(){\r\n        console.info(\"createDB()\");\r\n        let query = 'q=CREATE DATABASE '+this.database;\r\n        return $.ajax({\r\n            url:this.host+this.port+'/query?',\r\n            type:'GET',\r\n            contentType:'application/octet-stream',\r\n            data: query,\r\n            processData: false,\r\n            success: function (data) {\r\n                console.info(data);\r\n                console.info(\"database created\");\r\n            },\r\n            error: function(test, status, exception) {\r\n                console.log(\"Error: \" + exception);\r\n            }\r\n        });\r\n    }\r\n    //insert into a single measurement\r\n    async insertSingle(measurement,series,values){\r\n        let query = measurement+',';\r\n        for(let i = 0;i<series.length;i++){\r\n            query+=series[i]+'='+values[i];\r\n            if(i<series.length-2)\r\n                query+=',';\r\n            else query+=' ';\r\n        }\r\n        //console.info(\"QUERY: \"+query);\r\n        //console.info(\"URL: \"+this.host+this.port+'/write?db='+this.database);\r\n        return $.ajax({\r\n            url:this.host+this.port+'/write?db='+this.database,\r\n            type:'POST',\r\n            contentType:'application/octet-stream',\r\n            data: query,\r\n            processData: false,\r\n            error: function(test, status, exception) {\r\n                console.log(\"Error: \" + exception);\r\n            }\r\n        });\r\n    }\r\n    //insert inside all the db\r\n    async insert(measurements,series,values){ //measurements = nodi, series = stati, values = probability\r\n        const promises = [];\r\n        for(let i=0;i<measurements.length;i++){\r\n            promises.push(this.insertSingle(measurements[i],series[i],values[i]))\r\n        }\r\n        return Promise.all(promises); //synchronization\r\n    }\r\n    \r\n    //cancella il database\r\n    async drop(){\r\n        let query = 'q=DROP DATABASE '+this.database;\r\n        return $.ajax({\r\n            url:this.host+this.port+'/query?',\r\n            type:'GET', //controllare\r\n            contentType:'application/octet-stream',\r\n            data: query,\r\n            processData: false,\r\n            success: function (data) {\r\n                console.info(data);\r\n                console.info(\"database dropped\");\r\n            },\r\n            error: function(test, status, exception) {\r\n                console.log(\"Error: \" + exception);\r\n            }\r\n        });\r\n    }\r\n}\r\nmodule.exports = Influx;\r\n","//classe per poter parsare efficacemente una rete bayesiana\r\nclass NetParser{\r\n    constructor(){\r\n        console.info(\"NetParser()\");\r\n        this.jsonNet = null;\r\n        this.hasErrors = false;\r\n    }\r\n    //find a parent index for a node\r\n    getParentIndex(parentName, nodes){\r\n        let indexParent = -1;\r\n        for(let k=0;k<nodes.length;k++){\r\n            if(parentName === nodes[k].id)\r\n                indexParent = k;\r\n        }\r\n        return indexParent;\r\n    }\r\n    //check for logic order in the thresholds: ascending order is the only admitted, possible reordering\r\n    ascendingOrder(thresholds){\r\n        for (let i=0;i<thresholds.length-1;i++){\r\n            if(thresholds[i]>thresholds[i+1]){\r\n                console.info(\"Not ascending order in the thresholds given: \");\r\n                console.info(\"threshold \" + i + \" > \" + \" threshold \"+ (i+1));\r\n                console.info(thresholds[i] + \" > \" + thresholds[i+1]);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    //return the result of the check: true, the values are the exact number\r\n    isOk(node){\r\n        return ((node.stati.length === node.soglie.length) && this.ascendingOrder(node.soglie));\r\n        //numero di stati e soglie uguale e poi che le soglie siano in ordine crescente\r\n    }\r\n    controlNameNodes(jsonNet){\r\n        for(let i = 0; i < jsonNet.nodi.length; i++){\r\n            for(let j = 0; j < jsonNet.nodi.length; j++){\r\n                if(j!==i && jsonNet.nodi[i].id===jsonNet.nodi[j].id){\r\n                    console.info(\"Duplicate id between node n°\" + i + \" and node n°\" + j + \" with id=\"+jsonNet.nodi[j].id);\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    checkNormalize(probabilities){\r\n        let sum = 0;\r\n        for(let i=0;i<probabilities.length;i++)\r\n            sum+=probabilities[i];\r\n        console.info(sum);\r\n        return sum>=0.99 && sum<=1;\r\n    }\r\n    //check logic on cpt\r\n    checkCpt(NparentsStates,cpt){\r\n        if(NparentsStates === 1) return cpt.length === 1 && this.checkNormalize(cpt[0]); //nessun genitore\r\n        else { //ho dei genitori\r\n            if(NparentsStates !== cpt.length) return false;\r\n            for(let i=0;i<cpt.length;i++){\r\n                if(this.checkNormalize(cpt[i])){\r\n                    console.info(\"Not normalized probability\"); //da migliorare la precisione\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    //adding nodes and relative parents\r\n    checkSemantic(text_net) {\r\n        console.info(\"checkSemantic()\");\r\n        this.jsonNet = text_net;\r\n        \r\n        //init vars\r\n        let i, j;\r\n        this.hasErrors = this.controlNameNodes(this.jsonNet); //check for future\r\n        \r\n        //addNode\r\n        for (i = 0; i < this.jsonNet.nodi.length; i++) {\r\n            if(!this.isOk(this.jsonNet.nodi[i])){\r\n                this.hasErrors = true; //stop for the future, but not the cycle\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        //future operations check\r\n        //console.info(this.hasErrors);\r\n        if(!this.hasErrors){\r\n            //init vars\r\n            let indexParent,node,NparentsStates; //index for the parent search\r\n            //addParent\r\n            for (i=0;i<this.jsonNet.nodi.length;i++) {\r\n                node = this.jsonNet.nodi[i];\r\n                NparentsStates = 1;\r\n                //check num parents\r\n                if (node.parents !== null) {\r\n                    for (j = 0; j < node.parents.length; j++) {\r\n                        indexParent = this.getParentIndex(node.parents[j], this.jsonNet.nodi);\r\n                        if (indexParent !== -1) {  //check for mistake\r\n                            //nodes[i].addParent(nodes[indexParent]);\r\n                            NparentsStates*=this.jsonNet.nodi[indexParent].stati.length;\r\n                        }\r\n                        else {\r\n                            console.info(\"Missing parent n°\" + j + \" for node: \" + node.id);\r\n                            this.hasErrors = true;\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n               /*\r\n                //finiti tutti i genitori conto il numero di stati di tutti moltiplicati e glielo passo alla funzione di controllo\r\n                if(NetParser.checkCpt(NparentsStates,jsonNet.nodi[i].cpt))\r\n                    nodes[i].setCpt(jsonNet.nodi[i].cpt); //setting the cpt\r\n                else {\r\n                    this.hasErrors = true;\r\n                    console.info(\"node :\"+i+\" has problem on his cpt\");\r\n                }\r\n                */\r\n            }\r\n    \r\n        }\r\n        else return false;\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\nmodule.exports= new NetParser();\r\n","const Looper = require('../utils/Looper');\r\nconst DashboardLoader = require('../utils/DashboardLoader');\r\nconst InfluxProxy = require('../utils/InfluxProxy');\r\nimport {appEvents} from 'grafana/app/core/core';\r\n\r\nexport class Control{\r\n    /** @ngInject */\r\n    constructor($scope,backendSrv,$location){\r\n        this.$location = $location;\r\n        this.backendSrv = backendSrv;\r\n        this.panel = $scope.ctrl.panel;\r\n        this.loader = new DashboardLoader(backendSrv);\r\n        this.onInitData();\r\n        this.load();\r\n    }\r\n    \r\n    load(){\r\n        this.loader.getDashboards()\r\n            .then((res)=>{\r\n                this.dashboards = res;\r\n                this.networks = this.loader.extract(res);\r\n                this.setDataFromNets();\r\n                this.wait();\r\n            });\r\n    }\r\n    \r\n    wait(){\r\n        this.backendSrv.get('/api/search?');\r\n    }\r\n    \r\n    onInitData(){\r\n        this.samples = []; //contenitore per il numero di sample\r\n        this.time = []; //contenitore per i tempi di refresh\r\n        this.networks = []; //contenitore strutture reti bayesiae\r\n        this.dashboards = []; //contenitore per le dashboard da salvare\r\n        this.hasStarted = [];\r\n    }\r\n    \r\n    save(index) {\r\n        let options = {\r\n            overwrite : true\r\n        };\r\n        return this.backendSrv.saveDashboard(this.dashboards[index],options)\r\n            .then(()=>{\r\n                appEvents.emit('alert-success', ['Salvataggio della rete avvenuto correttamente', '']);\r\n            })\r\n            .catch((err)=>{\r\n                appEvents.emit('alert-error', ['Impossibile salvare le modifiche alla rete',err]);\r\n            });\r\n    }\r\n    setDataFromNets(){\r\n        let monitored,sample,time;\r\n        for(let i=0;i<this.networks.length;i++) {\r\n            console.info(this.networks[i].id);\r\n            monitored = this.networks[i].monitored;\r\n            \r\n            if(monitored){\r\n                this.hasStarted.push(monitored); //qui se è true devo azionare automaticamente Looper\r\n            }\r\n            else this.hasStarted.push(false);\r\n            \r\n            //this.hasStarted.push(false); //quando aggiorna ripartono sempre\r\n            \r\n            sample = this.networks[i].samples;\r\n            if(sample!==null)\r\n                this.samples.push(sample);\r\n            else this.samples.push(10000);\r\n            \r\n            time = this.networks[i].time;\r\n            if(time!==null)\r\n                this.time.push(time);\r\n            else this.time.push(10000);\r\n            \r\n            /* partenza automatica pericolosa perchè ogni volta che passo sulla pagina rilancia il loop\r\n            if(this.hasStarted[i]===true) //funziona ma se ritorno sulla pagina riattiva un altro loop\r\n                //devo cercare di capire se è già attivo un loop per quella pagina\r\n                this.start(i);\r\n             */\r\n        }\r\n    }\r\n    setSamples(value,i){\r\n        if(value!==null) this.samples[i] = value;\r\n    }\r\n    setTime(time,i){\r\n        if(time!==null) this.time[i] = time;\r\n    }\r\n    //starts the monitoring on the specified net\r\n    start(index){\r\n        this.hasStarted[index] = true;\r\n        this.networks[index].monitored=true;\r\n        this.networks[index].time = this.time[index];\r\n        this.networks[index].samples = this.samples[index];\r\n        //save & start\r\n        this.save(index)\r\n            .then(()=>{\r\n                Looper.setBackendSrv(this.backendSrv);\r\n                Looper.start(this.networks[index],index);\r\n            });\r\n    }\r\n    //stop the monitoring on the specified net\r\n    stop(index){\r\n        this.hasStarted[index] = false;\r\n        this.networks[index].monitored=false;\r\n        //save & stop\r\n        this.save(index)\r\n            .then(()=>{\r\n                Looper.setBackendSrv(this.backendSrv);\r\n                Looper.stop(this.networks[index],index);\r\n            });\r\n    }\r\n    \r\n    delete(index){\r\n        this.stop(index);\r\n        const uid = this.dashboards[index].uid;\r\n        console.info({uid});\r\n    \r\n        //vediamo se esiste\r\n        this.backendSrv\r\n            .getDashboardByUid(uid)\r\n            .then(dash => {\r\n                console.info(dash.dashboard.network.id);\r\n                \r\n                //**********\r\n                let influx = new InfluxProxy(this.networks[index].host,this.networks[index].port,this.networks[index].id);\r\n                influx.drop()\r\n                    .then(()=>{\r\n                        this.networks.splice(index,1); //elimino dall'array\r\n                        this.backendSrv.deleteDashboard(uid) //elimina la dashboard\r\n                            .then(()=>{\r\n                                this.deleteDatasource(dash.dashboard.network.id) //elimino la datasource\r\n                                    .then(()=>{\r\n                                        location.reload(); //refresh della pagina\r\n                                    });\r\n                            });\r\n                    })\r\n                    .catch((err)=>console.info(err));\r\n                //**********\r\n            })\r\n            .catch(err => {\r\n                appEvents.emit('alert-error', ['An error occurred', 'Try refreshing this page']);\r\n                err.isHandled = true;\r\n            });\r\n        \r\n    }\r\n    \r\n    deleteDatasource(id){\r\n        return this.backendSrv.delete('/api/datasources/name/InfluxDB-'+id)\r\n            .then((res)=>console.info(res))\r\n            .catch((err)=>console.info(err));\r\n    }\r\n    \r\n    redirect(){\r\n        this.$location.url('plugins/dreamcorp-app/page/import-bayesian-network'); //redirecting to importNet\r\n    }\r\n}\r\nControl.templateUrl = 'components/control.html';","import {appEvents} from \"grafana/app/core/core\";\r\n\r\nconst InfluxProxy = require('./InfluxProxy');\r\nconst DashboardLoader = require('./DashboardLoader');\r\nconst LogicNetBuilder = require('./LogicNetBuilder');\r\nconst alertData = require('./AlertData');\r\n\r\nclass Looper{\r\n    constructor(){\r\n        this.backendSrv = null;\r\n        this.networks = [];\r\n        this.logic_networks = [];\r\n        this.influxes = [];\r\n    }\r\n    setBackendSrv(backendSrv){\r\n        if(this.backendSrv === null){\r\n            this.backendSrv = backendSrv;\r\n            alertData.addBackend(backendSrv);\r\n        }\r\n        \r\n    }\r\n    loopAsync(time){\r\n        console.info(\"loopAsync()\");\r\n        const loader = new DashboardLoader(this.backendSrv);\r\n        loader.getNets()\r\n            .then((nets)=>{\r\n                this.networks = nets;\r\n                this.linkDatabases(); //collego er databases\r\n                //costruisco le reti logiche\r\n                this.logic_networks = LogicNetBuilder.buildAllNets(this.networks);\r\n                \r\n                //real loop\r\n                this.timer = setInterval(()=>{\r\n                    //check stop conditions\r\n                    if(this.stopLoop){\r\n                        setTimeout(()=>clearInterval(this.timer),0);\r\n                    }\r\n        \r\n                    loader.getNets()\r\n                        .then((nets)=>{\r\n                \r\n                            this.networks = nets;\r\n                \r\n                            let stateIndex,panelId,influx_index;\r\n                            let promises;\r\n                \r\n                            for(let i=0;i<this.networks.length;i++) { //per tutte le reti\r\n                    \r\n                                if (!this.networks[i].monitored) continue; //se non è monitorata, skippa il calcolo\r\n                    \r\n                                promises = [];\r\n                    \r\n                                for(let j=0;j<this.networks[i].nodi.length;j++) { //per tutti i nodi delle reti monitorate\r\n                        \r\n                                    panelId = this.networks[i].nodi[j].panel;\r\n                        \r\n                                    if (panelId === null){\r\n                                        this.logic_networks[i].unobserve(this.networks[i].nodi[j].id); //unobserve di jsbayes\r\n                                        continue;\r\n                                    } //se non ha un panel associato, skippa il calcolo\r\n                        \r\n                                    promises.push(alertData.getValueFromAlert(i, j, panelId) //estraggo i dati dal panel del nodo della rete monitorata\r\n                                        .then((value)=>{ //quando ha finito di cercare i dati\r\n                                            if (value !== null) { //controllo sui dati non utili\r\n                                                stateIndex = this.decideState(i, j, value); //capisco in che stato si trova il nodo\r\n                                                this.logic_networks[i].observe(this.networks[i].nodi[j].id, this.networks[i].nodi[j].stati[stateIndex]); //observe di jsbayes\r\n                                            }\r\n                                        })\r\n                                    );\r\n                                }\r\n                    \r\n                                //una volta finito tutte le operazioni di get sulla rete \"i\" faccio il sampling\r\n                                Promise.all(promises)\r\n                                    .then(()=>{\r\n                                        //sampling della rete\r\n                                        this.samplingNet(i)\r\n                                            .then(() => {\r\n                                    \r\n                                                let nodes = [];\r\n                                                let states = [];\r\n                                                let probs = [];\r\n                                    \r\n                                                for (let j = 0; j < this.networks[i].nodi.length; j++) {\r\n                                                    nodes.push(this.networks[i].nodi[j].id);\r\n                                                    states.push(this.networks[i].nodi[j].stati);\r\n                                                    probs.push(this.logic_networks[i].node(this.networks[i].nodi[j].id).probs());\r\n                                                }\r\n                                    \r\n                                                influx_index = this.findDatabase(this.networks[i].id);\r\n                                                this.influxes[influx_index].insert(nodes, states, probs)\r\n                                                    .catch((err) => console.info(err));\r\n                                            });\r\n                                    });\r\n                            }\r\n                        });\r\n                },time);\r\n            });\r\n    }\r\n    findDatabase(net_id){\r\n        for(let i=0;i<this.influxes.length;i++)\r\n            if(net_id === this.influxes[i].database)\r\n                return i;\r\n    }\r\n    linkDatabases(){\r\n        for(let i=0;i<this.networks.length;i++){\r\n            this.influxes.push(new InfluxProxy(this.networks[i].host,this.networks[i].port,this.networks[i].id)); //inserisco un nuovo influx\r\n        }\r\n    }\r\n    start(net,i){\r\n        this.stopLoop = false;\r\n        appEvents.emit('alert-success', ['Started Loop Net '+(i+1), '']);\r\n        this.loopAsync(net.time); //lo prendo direttamente dalla rete che gli passo\r\n    }\r\n    stop(net,i){\r\n        //console.info(\"stop loop net \"+(i+1));\r\n        appEvents.emit('alert-success', ['Stopped Loop Net '+(i+1), '']);\r\n        //**********\r\n        // provata un po'\r\n        const loader = new DashboardLoader(this.backendSrv);\r\n        loader.getNets()\r\n            .then((nets)=> {\r\n                let count = 0;\r\n                for(let i=0;i<nets.length;i++){\r\n                    if(nets[i].monitored)\r\n                        count++;\r\n                }\r\n                if(count===0)\r\n                    this.stopLoop = true;\r\n            });\r\n        //**********\r\n    }\r\n    decideState(netIndex,nodeIndex,alert_value){\r\n        //console.info(\"decideState\");\r\n        let stateIndex=0; //indice dello stato in cui mi trovo\r\n        for(let i=0;i<this.networks[netIndex].nodi[nodeIndex].soglie.length-1;i++){ //scorro tutte le soglie\r\n            if(alert_value>this.networks[netIndex].nodi[nodeIndex].soglie[i])\r\n                stateIndex++;\r\n            else break;\r\n        }\r\n        return stateIndex;\r\n    }\r\n    async samplingNet(netIndex){ //mi serve solo l'indice della rete\r\n        return await this.logic_networks[netIndex].sample(1000000); //inference\r\n    }\r\n}\r\n\r\nmodule.exports = new Looper();","const jsbayes = require('jsbayes');\r\n\r\nclass LogicNetBuilder{\r\n    constructor(){\r\n        console.info(\"LogicNetBuilder\");\r\n        this.logicNet = null;\r\n        this.logicNets = [];\r\n    }\r\n    static getParentIndex(parentName, nodes){\r\n        let indexParent = -1;\r\n        for(let k=0;k<nodes.length;k++){\r\n            if(parentName === nodes[k].name)\r\n                indexParent = k;\r\n        }\r\n        return indexParent;\r\n    }\r\n    buildLogicNet(net){\r\n        this.logicNet = jsbayes.newGraph();\r\n        \r\n        let i, j;\r\n        let nodes = []; //array di nodi ritornati dalla creazione di nodi con jsbayes, serve per collegare ai padri successivamente\r\n        \r\n        //nodes\r\n        for (i = 0; i < net.nodi.length; i++) {\r\n            nodes.push(this.logicNet.addNode(net.nodi[i].id, net.nodi[i].stati)); //aggiungo un nuovo nodo logico della rete bayesiana al graph\r\n        }\r\n        \r\n        let indexParent,node; //index for the parent search\r\n        //addParent\r\n        for (i=0;i<net.nodi.length;i++) {\r\n            node = net.nodi[i];\r\n            //check num parents\r\n            if (node.parents !== null) {\r\n                for (j = 0; j < node.parents.length; j++) {\r\n                    indexParent = LogicNetBuilder.getParentIndex(node.parents[j], nodes);\r\n                    nodes[i].addParent(nodes[indexParent]);\r\n                }\r\n            }\r\n            //nessun controllo per ora\r\n            nodes[i].setCpt(net.nodi[i].cpt); //setting the cpt\r\n        }\r\n        \r\n        return this.logicNet;\r\n    }\r\n    buildAllNets(nets){\r\n        this.logicNets = [];\r\n        for(let i=0;i<nets.length;i++)\r\n            this.logicNets.push(this.buildLogicNet(nets[i]));\r\n        return this.logicNets;\r\n    }\r\n}\r\n\r\nmodule.exports = new LogicNetBuilder();","(function(window) {\n  'use strict';\n\n  /**\n   * Initializes a conditional probability table.\n   * @param {Number} numValues Number of values.\n   * @returns {Array} Array of doubles that sum to 1.0.\n   */\n  function initCpt(numValues) {\n    var cpt = [];\n    var sum = 0;\n    for(var i=0; i < numValues; i++) {\n      cpt[i] = Math.random();\n      sum += cpt[i];\n    }\n    for(var i=0; i < numValues; i++) {\n      cpt[i] = cpt[i] / sum;\n    }\n    return cpt;\n  }\n\n  /**\n   * Initializes a CPT with fake and normalized values using recursion.\n   * @param {Array} values Values of variables (array of values).\n   * @param {Array} parents Array of JSON nodes that are parents of the variable.\n   * @param {Number} paIndex The current parent index.\n   * @returns {Array} An array of nested arrays representing the CPT.\n   */\n  function initCptWithParents(values, parents, paIndex) {\n    if(parents && parents.length > 0) {\n      if(parents.length === 1 || paIndex === parents.length - 1) {\n        var idx = parents.length === 1 ? 0 : paIndex;\n        var numPaVals = parents[idx].values.length;\n        var cpts = [];\n        for(var i=0; i < numPaVals; i++) {\n          var cpt = initCpt(values.length);\n          cpts.push(cpt);\n        }\n        return cpts;\n      } else {\n        var cpts = [];\n        var numPaVals = parents[paIndex].values.length;\n        for(var i=0; i < numPaVals; i++) {\n          var cpt = initCptWithParents(values, parents, paIndex+1);\n          cpts.push(cpt);\n        }\n        return cpts;\n      }\n    } else {\n      return initCpt(values.length);\n    }\n  }\n\n  /**\n   * Creates a Promise.\n   * @param {Object} f Function.\n   * @param {Array} args List of arguments.\n   * @returns {Promise} Promise.\n   */\n  function async(f, args) {\n    return new Promise(\n      function(resolve, reject) {\n        try {\n          var r = f.apply(undefined, args);\n          resolve(r);\n        } catch(e) {\n          reject(e);\n        }\n      }\n    );\n  }\n\n  /**\n   * Checks if an object is an array.\n   * @param {*} o Object.\n   * @returns {Boolean} A boolean to indicate if the object is an array object.\n   */\n  function isArray(o) {\n    return (o.constructor === Array);\n  }\n\n  /**\n   * Checks if an object is an array of arrays.\n   * @param {*} o Object.\n   * @returns {Boolean} A boolean to indicate if the object is array of arrays.\n   */\n  function isArrayOfArray(o) {\n    if(isArray(o)) {\n      if(o.length > 0) {\n        if(isArray(o[0])) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Sets the CPT entries to the specified probabilities.\n   * @param {Array} cpt Array of nested arrays representing a CPT.\n   * @param {Array} probs Array of arrays of probabilities representing a CPT.\n   * @param {Number} index The current index.\n   * @returns {Number} The next index.\n   */\n  function setNodeCptProbs(cpt, probs, index) {\n    if(!isArrayOfArray(cpt)) {\n      for(var i=0; i < cpt.length; i++) {\n        cpt[i] = probs[index][i];\n      }\n      var nextIndex = index + 1;\n      return nextIndex;\n    } else {\n      var next = index;\n      for(var i=0; i < cpt.length; i++) {\n        next = setNodeCptProbs(cpt[i], probs, next);\n      }\n      return next;\n    }\n  }\n\n  /**\n   * Initializes a node's CPT.\n   * @param {Array} values Array of values.\n   * @param {Array} parents Array of parents.\n   * @param {Array} probs Array of arrays of probabilities.\n   * @returns {Array} Array of nested arrays representing a CPT.\n   */\n  function initNodeCpt(values, parents, probs) {\n    var cpt = initCptWithParents(values, parents, 0);\n    setNodeCptProbs(cpt, probs, 0);\n    return cpt;\n  }\n\n  /**\n   * Normalizes an array of values such that the elements sum to 1.0. Note that\n   * 0.001 is added to every value to avoid 0.0 probabilities. This adjustment\n   * helps with visualization downstream.\n   * @param {Array} arr Array of probabilities.\n   * @returns {Array} Normalized probailities.\n   */\n  function normalizeProbs(arr) {\n    var probs = [];\n    var sum = 0.0;\n    for (var i=0; i < arr.length; i++) {\n      probs[i] = arr[i] + 0.001\n      sum += probs[i]\n    }\n    for (var i=0; i < arr.length; i++) {\n      probs[i] = probs[i] / sum;\n    }\n    return probs;\n  }\n\n  /**\n   * Normalizes a CPT.\n   * @param {Array} cpts Array of arrays (matrix) representing a CPT.\n   * @returns {Array} Normalized CPT.\n   */\n  function normalizeCpts(cpts) {\n    var probs = []\n    for (var i=0; i < cpts.length; i++) {\n      probs.push(normalizeProbs(cpts[i]));\n    }\n    return probs;\n  }\n\n  /**\n   * Defines the library.\n   */\n  function defineLib() {\n    var jsbayes = {};\n    jsbayes.newGraph = function() {\n      return {\n        nodes: [],\n        saveSamples: false,\n        samples: [],\n        reinit: function() {\n          var f = function(g) {\n            for(var i=0; i < g.nodes.length; i++) {\n              var node = g.nodes[i];\n              if(node.dirty === undefined || node.dirty) {\n                node.cpt = initCptWithParents(node.values, node.parents, 0);\n                node.dirty = false;\n              }\n            }\n          };\n          return async(f, [this]);\n        },\n        samplesAsCsv: function(options) {\n          var opts = options || {};\n          var D_ROW = opts.rowDelimiter || '\\n';\n          var D_FIELD = opts.fieldDelimiter || ',';\n          var csv = '';\n          var row = '';\n          for(var i=0; i < this.nodes.length; i++) {\n            row += this.nodes[i].name;\n            if(i < this.nodes.length-1) {\n              row += D_FIELD;\n            }\n          }\n          csv += row + D_ROW;\n\n          for(var i=0; i < this.samples.length; i++) {\n            var sample = this.samples[i];\n            row = '';\n            for(var j=0; j < this.nodes.length; j++) {\n              var node = this.nodes[j];\n              row += sample[node.name];\n              if(j < this.nodes.length-1) {\n                row += D_FIELD;\n              }\n            }\n            csv += row;\n            if(i < this.samples.length-1) {\n              csv += D_ROW;\n            }\n          }\n          \n          return csv;\n        },\n        sample: function(samples) {\n          var f = function(g, samples) {\n            if(g.saveSamples) {\n              //reset the samples if we want to save them\n              g.samples = [];\n            }\n            \n            for(var h=g.nodes.length-1; h >= 0; h--) {\n              g.nodes[h].initSampleLw();\n            }\n\n            var lwSum = 0;\n            for(var count=0; count < samples; count++) {\n              for(var h=g.nodes.length-1; h >= 0; h--) {\n                var n = g.nodes[h];\n                if(!n.isObserved) {\n                  n.value = -1;\n                }\n                n.wasSampled = false;\n              }\n\n              var fa = 1;\n              for(var h=g.nodes.length-1; h >= 0; h--) {\n                var n = g.nodes[h];\n                fa *= n.sampleLw();\n              }\n              lwSum += fa;\n              for(var h=g.nodes.length-1; h >= 0; h--) {\n                var n = g.nodes[h];\n                n.saveSampleLw(fa);\n              }\n              \n              if(g.saveSamples) {\n                var sample = {};\n                for(var h=g.nodes.length-1; h >= 0; h--) {\n                  var n = g.nodes[h];\n                  sample[n.name] = n.values[n.value];\n                }\n                g.samples.push(sample);\n              }\n            }\n\n            return lwSum;\n          };\n          return async(f, [this, samples]);\n        },\n        update: function(m) {\n          for(var i=0; i < this.nodes.length; i++) {\n            var tnode = this.nodes[i]; //'this' node\n            var unode = m[tnode.name]; //update node\n\n            if(!unode) {\n              continue;\n            }\n\n            tnode.value = unode.value;\n            tnode.wasSampled = unode.wasSampled;\n            tnode.sampledLw = unode.sampledLw;\n          }\n        },\n        node: function(name) {\n          if(!this.nodeMap) {\n            this.nodeMap = {};\n            for(var i=0; i < this.nodes.length; i++) {\n              var node = this.nodes[i];\n              this.nodeMap[node.name] = node;\n            }\n          }\n          return this.nodeMap[name];\n        },\n        observe: function(name, value) {\n          var node = this.node(name);\n          if(node) {\n            var index = node.valueIndex(value);\n            if(index >= 0) {\n              node.isObserved = true;\n              node.value = index;\n            } else {\n              console.error('could not find value ' + value + ' for node ' + name);\n            }\n          } else {\n            console.error('could not find node with name ' + name);\n          }\n        },\n        unobserve: function(name) {\n          var node = this.node(name);\n          if(node) {\n            node.isObserved = false;\n            node.value = -1;\n          }\n        },\n        addNode: function(name, values) {\n          var node = {\n            name: name,\n            values: values,\n            value: -1,\n            parents: [],\n            wasSampled: false,\n            sampledLw: undefined,\n            addParent: function(parent) {\n              this.parents.push(parent);\n              this.dirty = true;\n              return this;\n            },\n            valueIndex: function(v) {\n              if(!this.valueIndexMap) {\n                this.valueIndexMap = {};\n                for(var i=0; i < this.values.length; i++) {\n                  var value = this.values[i];\n                  this.valueIndexMap[value] = i;\n                }\n              }\n              return this.valueIndexMap[v];\n            },\n            initSampleLw: function() {\n              this.sampledLw = undefined;\n            },\n            sampleLw: function() {\n              if(this.wasSampled) {\n                return 1;\n              }\n\n              var fa = 1;\n              for(var h=0; h < this.parents.length; h++) {\n                var pa = this.parents[h];\n                var pSampleLw = pa.sampleLw();\n                fa *= pSampleLw;\n              }\n\n              this.wasSampled = true;\n\n              var dh = this.cpt;\n              for(var h=0; h < this.parents.length; h++) {\n                var p = this.parents[h];\n                var v = p.value;\n                dh = dh[v];\n              }\n\n              if(this.value != -1) {\n                var v = dh[this.value];\n                fa *= v;\n              } else {\n                var fv = Math.random();\n                for(var h=0; h < dh.length; h++) {\n                  var v = dh[h];\n                  fv -= v;\n                  if(fv < 0) {\n                    this.value = h;\n                    break;\n                  }\n                }\n              }\n\n              return fa;\n            },\n            saveSampleLw: function(f) {\n              if(!this.sampledLw) {\n                this.sampledLw = new Array(this.values.length);\n                for(var h=this.values.length-1; h >= 0; h--) {\n                  this.sampledLw[h] = 0;\n                }\n              }\n              this.sampledLw[this.value] += f;\n            },\n            setCpt: function(probs) {\n              if(this.parents.length === 0) {\n                this.cpt = normalizeProbs(probs);\n              } else {\n                this.cpt = initNodeCpt(this.values, this.parents, normalizeCpts(probs));\n              }\n            },\n            probs: function() {\n              if(!this.sampledLw) {\n                return [];\n              }\n              var sum = 0.0;\n              var probs = [];\n              for(var i=0; i < this.sampledLw.length; i++) {\n                var s = this.sampledLw[i];\n                sum += s;\n                probs.push(s);\n              }\n              for(var i=0; i < this.sampledLw.length; i++) {\n                probs[i] = probs[i] / sum;\n              }\n              return probs;\n            }\n          }\n          this.nodes.push(node);\n          return node;\n        }\n      };\n    }\n\n    jsbayes.toMessage = function(g) {\n      var nodes = {};\n      var parents = {};\n\n      for(var i=0; i < g.nodes.length; i++) {\n        var n = g.nodes[i];\n        var node = {\n          name: n.name,\n          values: n.values,\n          value: n.value,\n          parents: [],\n          wasSampled: n.wasSampled,\n          sampledLw: n.sampledLw,\n          cpt: n.cpt\n        };\n        nodes[n.name] = node;\n\n        var pas = [];\n        for(var j=0; j < n.parents.length; j++) {\n          var pa = n.parents[j];\n          pas.push(pa.name);\n        }\n        parents[n.name] = pas;\n      }\n\n      var msg = {\n        samples: 10000,\n        nodes: nodes,\n        parents: parents\n      };\n\n      return JSON.stringify(msg);\n    }\n\n    return jsbayes;\n  }\n\n  if(typeof module === 'object' && module && typeof module.exports === 'object') {\n    module.exports = defineLib();\n  } else {\n    if(typeof(jsbayes) === 'undefined') {\n      window.jsbayes = defineLib();\n    }\n\n    if(typeof define === 'function' && define.amd) {\n      define('jsbayes', [], defineLib());\n    }\n  }\n}\n)(this);","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","class AlertData{\r\n    constructor(){\r\n        console.info(\"AlertData\");\r\n        this.backend = null;\r\n        this.data = [];\r\n    }\r\n    addBackend(backend){\r\n        this.backend = backend;\r\n    }\r\n    async getDataFromAlert(netIndex,nodeIndex,panelId){\r\n        \r\n        return await this.backend.get('/api/alerts/?panelId='+panelId)\r\n            .then(res => {\r\n                let tris = {\r\n                    value: null,\r\n                    node: null,\r\n                    net: null\r\n                };\r\n                //not null, not empty, not null first, non empty first, not null evalData\r\n                if(res !== null && res.length !== 0 && res[0] !== null && res[0].length !==0 && res[0].evalData !== null && res[0].evalData.evalMatches !== null && res[0].evalData.evalMatches.length !== 0 && res[0].evalData.evalMatches[0].value !== null) {\r\n                    tris.value = res[0].evalData.evalMatches[0].value;\r\n                    tris.node = nodeIndex;\r\n                    tris.net = netIndex;\r\n                }\r\n                this.data.push(tris); //se fallisce inserisco il valore null\r\n            })\r\n            .catch(err => err.isHandled=true);\r\n    }\r\n    \r\n    async getValueFromAlert(netIndex,nodeIndex,panelId){\r\n        \r\n        return await this.backend.get('/api/alerts/?panelId='+panelId)\r\n            .then(res => {\r\n                //not null, not empty, not null first, non empty first, not null evalData\r\n                let value = null;\r\n                if(res !== null && res.length !== 0 && res[0] !== null && res[0].length !==0 && res[0].evalData !== null && res[0].evalData.evalMatches !== null && res[0].evalData.evalMatches.length !== 0 && res[0].evalData.evalMatches[0].value !== null) {\r\n                    value = res[0].evalData.evalMatches[0].value;\r\n                }\r\n                return value;\r\n            })\r\n            .catch(err => err.isHandled=true);\r\n    }\r\n    \r\n    getDataFromAllAlerts(nets){\r\n        //console.info(\"getDataFromAllAlerts\");\r\n        this.networks = nets;\r\n        const promises = [];\r\n        let panelId = null;\r\n        let tris = {\r\n          value: null,\r\n          net: null,\r\n          node: null\r\n        };\r\n        for(let i=0;i<this.networks.length;i++){ //per ogni rete\r\n            if(this.networks[i].monitored) { //***********************+ si può rimuovere visto che il controllo avviene dentro loop in Looper.js\r\n                for (let j = 0; j < this.networks[i].nodi.length; j++) { //per tutti i nodi\r\n                    panelId = this.networks[i].nodi[j].panel;\r\n                    if (panelId) //filtro per i nodi non monitorati\r\n                        promises.push(this.getDataFromAlert(i, j, panelId)); //eseguo il check dell'alert solo per i panel associati\r\n                    else {\r\n                        tris.net = i;\r\n                        tris.node = j;\r\n                        this.data.push(tris); //inserisco un tris con solo valore nullo, ma rete e nodo presenti per poter fare la unobserve\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Promise.all(promises)  //lock synchro\r\n            .then(()=>{\r\n                return this.data;\r\n            });\r\n    }\r\n}\r\nmodule.exports = new AlertData();"],"sourceRoot":""}